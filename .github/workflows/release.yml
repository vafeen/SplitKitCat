name: Create Release

on:
  push:
    branches:
      - release
      - 23-add-rpm-appimage
  workflow_dispatch:

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.generate_tag.outputs.RELEASE_TAG }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: Generate Release Tag
        id: generate_tag
        run: |
          # Get today's base tag in YY.MM.DD format
          TODAY_BASE=$(TZ=Europe/Moscow date +'%y.%m.%d')
          echo "Base date for tag: $TODAY_BASE"

          # Count how many tags already exist for today (base + patches)
          EXISTING_TAGS_COUNT=$(git tag -l "${TODAY_BASE}*" | wc -l)
          echo "Found $EXISTING_TAGS_COUNT existing tag(s) for today."

          if [ $EXISTING_TAGS_COUNT -eq 0 ]; then
            # This is the first release of the day.
            RELEASE_TAG="$TODAY_BASE"
          else
            # This is a patch release. The patch number is the count of existing tags.
            PATCH_NUMBER=$EXISTING_TAGS_COUNT
            FORMATTED_PATCH=$(printf "%02d" $PATCH_NUMBER)
            RELEASE_TAG="${TODAY_BASE}${FORMATTED_PATCH}"
          fi
          
          echo "Generated tag: $RELEASE_TAG"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT

  build-ubuntu:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build AppImage, Deb and Jar
        run: |
          ./gradlew :composeApp:packageReleaseAppImage -PversionName="${{ needs.prepare-release.outputs.release_tag }}"
          ./gradlew :composeApp:packageReleaseDeb -PversionName="${{ needs.prepare-release.outputs.release_tag }}"
          ./gradlew :composeApp:fatJar -PversionName="${{ needs.prepare-release.outputs.release_tag }}"

      - name: Archive AppImage
        run: |
          tar -czvf composeApp/build/compose/binaries/main-release/app/SplitKitCat-${{ needs.prepare-release.outputs.release_tag }}.tar.gz -C composeApp/build/compose/binaries/main-release/app SplitKitCat

      - name: Upload Ubuntu artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-artifacts
          path: |
            composeApp/build/compose/binaries/main-release/deb/*.deb
            composeApp/build/compose/binaries/main-release/app/*.tar.gz
            composeApp/build/libs/*.jar

  build-fedora:
    needs: prepare-release
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Install RPM build tools
        run: dnf install -y rpm-build

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Rpm
        run: ./gradlew :composeApp:packageReleaseRpm -PversionName="${{ needs.prepare-release.outputs.release_tag }}"

      - name: Upload Fedora artifact
        uses: actions/upload-artifact@v4
        with:
          name: fedora-artifacts
          path: composeApp/build/compose/binaries/main-release/rpm/*.rpm

  build-windows:
    needs: prepare-release
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Build Msi
        run: ./gradlew.bat :composeApp:packageReleaseMsi -PversionName="${{ needs.prepare-release.outputs.release_tag }}"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: composeApp/build/compose/binaries/main-release/msi/*.msi

  release:
    needs: [ prepare-release, build-ubuntu, build-fedora, build-windows ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Git Tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ needs.prepare-release.outputs.release_tag }}
          message: "Release ${{ needs.prepare-release.outputs.release_tag }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.release_tag }}
          name: ${{ needs.prepare-release.outputs.release_tag }}
          body: ""
          files: |
            artifacts/ubuntu-artifacts/*.deb
            artifacts/ubuntu-artifacts/*.tar.gz
            artifacts/ubuntu-artifacts/*.jar
            artifacts/fedora-artifacts/*.rpm
            artifacts/windows-artifacts/*.msi
